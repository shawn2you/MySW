import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;
 
// [교육P-0016] 동굴 
public class Solution {
    static int T, N, H;
    static int[] up; // 높이별 장애물 갯수
      
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
          
        for(int test_case = 1; test_case <= T; test_case++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            H = Integer.parseInt(st.nextToken());
            up = new int[H + 1];
              
            int tmp;
              
            for(int i = 1; i <= N; i++) { // 높이별 장애물 누적합 구하기 위해, 시작에 +1, 끝 다음에-1
                tmp = Integer.parseInt(br.readLine());
                  
                if(i % 2 == 1) { // 홀수는 아래서 올라오는 장애물
                    up[1]++; // 높이 1에서 장애물 생김
                    up[tmp + 1]--; // 높이 tmp+1에서 장애물 사라짐
                }
                else { // 짝수는 위에서 내려오는 장애물
                    up[H - tmp + 1]++; // 동굴높이-tmp+1에서 장애물 생김
                }
            }
             
            for(int i = 2; i <= H; i++) { // 높이별 장애물 누적합
                up[i] += up[i - 1];
            }
              
            Arrays.sort(up);
              
            int min = up[1];
            int cnt = 1;
              
            for(int i = 2; i <= H; i++) { // 제일 적은 장애물 구간 카운트
                if(up[i] == min) {
                    cnt++;
                }
                else {
                    break;
                }
            }
              
            System.out.println("#" + test_case + " " + min + " " + cnt);
         }
    }
}
