import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;
  
// [연습P-0002] 롤러코스터
public class Solution {
    static int T, L, N, B, Ans; // L: 롤러코스터 길이, N: 부품 수, B, 비용, Ans: 답
    //static int[] X = new int[10000]; // 부품별 시작위치
    static int[] W = new int[10000]; // 부품별 길이
    static int[] F = new int[10000]; // 부품별 재미도
    static int[] C = new int[10000]; // 부품별 가격
    static ArrayList<Integer>[] wArr = new ArrayList[1001];
    static int[][] D = new int[1001][1001]; // i길이이고 j예산일 때 최대 재미
  
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
  
        for(int i = 1; i <= 1000; i++) {
            wArr[i] = new ArrayList<Integer>();
        }
  
        for(int tc = 1; tc <= T; tc++) {
            st = new StringTokenizer(br.readLine());
            L = Integer.parseInt(st.nextToken());
            N = Integer.parseInt(st.nextToken());
            B = Integer.parseInt(st.nextToken());
            Ans = -1;
  
            for(int i = 1; i <= L; i++) {
                wArr[i].clear();
            }
  
            int x;
  
            for(int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                x = Integer.parseInt(st.nextToken());
                W[i] = Integer.parseInt(st.nextToken());
                F[i] = Integer.parseInt(st.nextToken());
                C[i] = Integer.parseInt(st.nextToken());
  
                if(x + W[i] <= L) {
                    wArr[x + W[i]].add(i); // 끝나는 위치 기준으로 사용가능한 부품 리스트
                }
            }
  
            Arrays.fill(D[0], 0); // 초기화
  
            for(int i = 1; i <= L; i++) {
                Arrays.fill(D[i], -1); // 초기화
            }
  
            for(int i = 1; i <= L; i++) { // i길이이고
                for(int j = 1; j <= B; j++) { // j예산일때 최대 재미 뽑아보자
                    if(wArr[i].size() == 0) {
                        continue;
                    }
  
                    D[i][j] = -1;
  
                    for(int k : wArr[i]) { // i길이일때 사용할 수 있는 부품 가져오기
                        //System.out.println(i + " " + j + " " + k + " " + W[k] + " " + C[k]);
                        if(j - C[k] < 0 || D[i - W[k]][j - C[k]] == -1) { // 해당부품의 가격이 예산초과 || 해당부품의 길이만큼 제외했을 때 값 없으면
                            continue;
                        }
  
                        D[i][j] = max(D[i][j], D[i - W[k]][j - C[k]] + F[k]); // 이번 부품 사용 안하는거 vs 사용하는거
                    }
  
                    if(i == L) {
                        Ans = max(Ans, D[i][j]);
                    }
                }
            }
  
            /*
            for(int i = 1; i <= L; i++) {
                for(int j = 1; j <= B; j++) {
                    System.out.print(D[i][j] + " ");
                }
                System.out.println();
            }
            */
  
            //System.out.println("#" + tc + " " + Ans);
            bw.write("#" + tc + " " + Ans + "\n");
        }
  
        bw.flush();
        bw.close();
        br.close();
    }
  
    static int max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }
}
