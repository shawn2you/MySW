import java.io.*;
import java.util.*;
 
public class Solution {
    static int T, N, Q;
    static int[] depth;
    static int[][] parent;
    static ArrayList<Integer>[] adj;
    static Queue<Integer> que = new LinkedList<Integer>();
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
         
        for(int test_case = 1; test_case <= T; test_case++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            Q = Integer.parseInt(st.nextToken());
            depth = new int[N + 1];
            que.clear();
            int K;
            int KMAX = 0;
             
            for(K = 1; K < N; K*=2) {
                KMAX++;
            };
             
            //System.out.println(KMAX);
             
            parent = new int[KMAX + 1][N + 1];
            adj = new ArrayList[N + 1];
            for(int i = 0; i <= N; i++) {
                adj[i] = new ArrayList<Integer>();
                depth[i] = -1;
            }
             
            st = new StringTokenizer(br.readLine());
            int x;
            parent[0][1] = 0;
             
            for(int i = 2; i <= N; i++) {
                x = Integer.parseInt(st.nextToken());
                adj[x].add(i);
                parent[0][i] = x; // 부모 세팅
            }
             
            depth[1] = 0;
            que.add(1);
             
            while(!que.isEmpty()) {
                int tmp = que.poll();
                 
                for(int n : adj[tmp]) {
                    depth[n] = depth[tmp] + 1; // 깊이 세팅
                     
                    if(adj[n] != null && adj[n].size() > 0) {
                        que.add(n);
                    }
                }
            }
             
            /*
            // 초기값 세팅 잘됐나 확인
            for(int i = 1; i <= N; i++) {
                //System.out.print(parent[0][i] + " ");
                System.out.print(depth[i] + " ");
            }
            System.out.println();
            System.out.println();
            */
             
            // 2^K 조상 세팅
            for(int k = 1; k < KMAX + 1; k++) {
                for(int n = 1; n <= N; n++) {
                    // n의 2^k번째 조상은 n의 2^(k-1)번째 조상의 2^(k-1)번째 조상.
                    // 2^k = 2^(k-1) + 2^(k-1)
                    parent[k][n] = parent[k-1][parent[k-1][n]]; // 점화식
                }
            }
             
            /*
            // 2^K 조상 잘 세팅됐나 확인
            for(int k = 0; k < KMAX + 1; k++) {
                for(int n = 1; n <= N; n++) {
                    System.out.print(parent[k][n] + " ");
                }
                System.out.println();
            }
            */
             
            int a, b;
             
            bw.write("#" + test_case);
             
            for(int i = 0; i < Q; i++) {
                st = new StringTokenizer(br.readLine());
                a = Integer.parseInt(st.nextToken());
                b = Integer.parseInt(st.nextToken());
                 
                // a와 b 높이 맞추기
                if(depth[a] < depth[b]) {
                    for(int k = KMAX; k >= 0; k--) {
                        if(depth[parent[k][b]] >= depth[a]) {
                            b = parent[k][b];
                        }
                    }
                }
                else if(depth[a] > depth[b]) {
                    for(int k = KMAX; k >= 0; k--) {
                        if(depth[parent[k][a]] >= depth[b]) {
                            a = parent[k][a];
                        }
                    }
                }
                 
                //System.out.println(a + " : " + b);
                 
                int ans;
                 
                for(int k = KMAX; k >= 0 && a != b; k--) {
                    if(parent[k][a] != parent[k][b]) {
                        a = parent[k][a];
                        b = parent[k][b];
                    }
                }
                 
                // 두 노드가 같다면 a는 b의 조상
                if(a == b) {
                    ans = a;
                }
                else { // 다르다면
                    ans = parent[0][a];
                }
                 
                bw.write(" " + ans);
            }
            bw.write("\n");
        }
         
        bw.flush();
        bw.close();
    }
}
