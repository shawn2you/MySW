import java.io.*;
import java.util.*;
public class Solution {
 
    static int T, N, seq;
    static int map[], cnt[], visited[]; 
     
    public static void main(String[] args) throws IOException {
         
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
         
        T = Integer.parseInt(br.readLine().trim());
        for(int tc=1;tc<=T;tc++) {
            seq = 1;
             
            N = Integer.parseInt(br.readLine().trim());
            map = new int[N+1];
            visited = new int[N+1];
            cnt = new int[N+1];
             
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int i=1;i<=N;i++){
                map[i] = Integer.parseInt(st.nextToken());
            }
             
            long ans = 0;
             
            Arrays.fill(cnt, -1);
            Arrays.fill(visited, 0);
            for(int i=1;i<=N;i++) {
                if(visited[i] == 0) {                   
                    seq = 1;                    
                    dfs(i);                 
                }
            }
            for(int i=1;i<=N;i++) {
                ans += ((long)cnt[i]*(long)(cnt[i]+1))/2;
            }
            bw.write("#"+tc+" "+ ans + "\n");
            bw.flush();
        }
        bw.close();
    }
     
    static int dfs(int i) {
        int next = i;
        visited[next] = seq++;
         
        int ret = 0, ret2;  
        if(cnt[map[next]] != -1) 
            return cnt[next] = cnt[map[next]] + 1;
         
        if(visited[map[next]] == 0) {           
            ret2 = dfs(map[next]);
            if(cnt[i] == -1)// 사이클이 아니면
                ret = ret2 + 1;
            else ret = ret2;
        }else {
                     
            if(visited[i] >= visited[map[next]]) {
                int period = visited[i] - visited[map[next]] + 1;
                for(int j=0;j<period;j++) {         
                    ret = cnt[map[next]] = period - 1;
                    next = map[next];               
                }
            }else {
                ret = cnt[map[next]] + 1;
            }           
        }
         
        return cnt[i] = ret;
    }
     
}
