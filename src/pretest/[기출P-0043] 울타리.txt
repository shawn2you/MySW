import java.io.*;
import java.util.*;
 
// (중상) [기출P-0043] 울타리
public class Solution {
    static int T, N, idx;
    static class Pile {
        int x, y, cnt;
        ArrayList<Integer> rel = new ArrayList<Integer>();
         
        public Pile(int x, int y, int n) {
            this.x = x;
            this.y = y;
        }
    }
    static Pile[] ps = new Pile[100];
    static Pile S;
    static Pile E;
    static Queue<int[]> que = new LinkedList<int[]>();
    static int[] V = new int[100];
    static int[] befo = new int[100];
    static boolean dfsEnd;
    static int stt, end;
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
         
        for(int i = 0; i < 100; i++) {
            ps[i] = new Pile(0, 0, 0);
        }
         
        for(int tc = 1; tc <= T; tc++) {
            N = Integer.parseInt(br.readLine());
            que.clear();
             
            idx = 0;
            int a, b, c, d, p1, p2;
             
            for(int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                a = Integer.parseInt(st.nextToken());
                b = Integer.parseInt(st.nextToken());
                c = Integer.parseInt(st.nextToken());
                d = Integer.parseInt(st.nextToken());
                p1 = p2 = -1;
                 
                for(int j = 0; j < idx; j++) {
                    if(ps[j].x == c && ps[j].y == d) {
                        p2 = j;
                    }
                     
                    if(ps[j].x == a && ps[j].y == b) {
                        p1 = j;
                        break;
                    }
                }
                 
                if(p2 == -1) {
                    for(int j = p1 + 1; j < idx; j++) {
                        if(ps[j].x == c && ps[j].y == d) {
                            p2 = j;
                            break;
                        }
                    }
                }
                 
                if(p1 == -1) {
                    p1 = idx;
                    ps[p1].x = a;
                    ps[p1].y = b;
                    ps[p1].cnt = 0;
                    ps[p1].rel.clear();
                    idx++;
                }
                 
                if(p2 == -1) {
                    p2 = idx;
                    ps[p2].x = c;
                    ps[p2].y = d;
                    ps[p2].cnt = 0;
                    ps[p2].rel.clear();
                    idx++;
                }
                 
                ps[p1].rel.add(p2);
                ps[p2].rel.add(p1);
                ps[p1].cnt++;
                ps[p2].cnt++;
            }
             
            st = new StringTokenizer(br.readLine());
            S = new Pile(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), 0);
             
            st = new StringTokenizer(br.readLine());
            E = new Pile(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), 0);
             
            for(int i = 0; i < idx; i++) {
                V[i] = 101; // 방문순서
                befo[i] = -1; // 이전 인덱스
            }
             
            dfsEnd = false;
            stt = end = -1;
             
            if(!isCycle()) { // 울타리에 사이클 없으면 울타리 안넘고 S -> E 가능
                System.out.println("#" + tc + " 0");
                continue;
            }
             
            ArrayList<Integer> arr = new ArrayList<Integer>();
             
            arr.add(end);
             
            int bf = befo[end];
             
            while(bf != stt) {
                arr.add(bf);
                bf = befo[bf];
            }
             
            arr.add(stt); // 시작점 세팅
            arr.add(end); // 추가 세팅
             
            Pile Q1 = new Pile(1000000001, S.y + 1, 0);
            Pile Q2 = new Pile(1000000001, E.y + 1, 0);
            int cnt1 = 0;
            int cnt2 = 0;
             
            for(int i = 0; i < arr.size() - 1; i++) {
                int ps1, ps2;
                ps1 = arr.get(i);
                ps2 = arr.get(i + 1);
                 
                int ret1 = ccw(S.x, S.y, Q1.x, Q1.y, ps[ps1].x, ps[ps1].y) * ccw(S.x, S.y, Q1.x, Q1.y, ps[ps2].x, ps[ps2].y);
                int ret2 = ccw(ps[ps1].x, ps[ps1].y, ps[ps2].x, ps[ps2].y, S.x, S.y) * ccw(ps[ps1].x, ps[ps1].y, ps[ps2].x, ps[ps2].y, Q1.x, Q1.y);
                 
                if(ret1 < 0 && ret2 < 0) {
                    cnt1++;
                }
                 
                ret1 = ccw(E.x, E.y, Q2.x, Q2.y, ps[ps1].x, ps[ps1].y) * ccw(E.x, E.y, Q2.x, Q2.y, ps[ps2].x, ps[ps2].y);
                ret2 = ccw(ps[ps1].x, ps[ps1].y, ps[ps2].x, ps[ps2].y, E.x, E.y) * ccw(ps[ps1].x, ps[ps1].y, ps[ps2].x, ps[ps2].y, Q2.x, Q2.y);
                 
                if(ret1 < 0 && ret2 < 0) {
                    cnt2++;
                }
            }
             
            if(cnt1 % 2 == cnt2 % 2) { // 둘다 내부의 점이거나 외부의 점이면 울타리 안건너도 됨
                System.out.println("#" + tc + " 0");
            }
            else { // 아니면 한번은 건너야 됨
                System.out.println("#" + tc + " 1");
            }
        }
    }
 
    static int ccw(int x1, int y1, int x2, int y2, int x3, int y3) {
        x2 = x2 - x1;
        y2 = y2 - y1;
        x3 = x3 - x1;
        y3 = y3 - y1;
         
        long res = (long) x2 * y3 - (long) y2 * x3;
         
        if(res < 0) {
            return -1;
        }
        else if(res > 0) {
            return 1;
        }
         
        return 0;
    }
     
    static boolean isCycle() {
        int st = -1;
         
        for(int i = 0; i < idx; i++) {
            if(ps[i].cnt == 1) { // 끄트머리 말뚝 찾기
                st = i;
                break;
            }
        }
         
        if(st == -1) { // 끄트머리 없으면 사이클이겠네
            st = 0; // 걍 첫번째꺼 시작으로 놓자
        }
         
        V[st] = 1;
        befo[st] = -2;
        dfs(st, 1); // 노드, 방문순서
         
        return dfsEnd;
    }
 
    static void dfs(int now, int order) {
        for(int i = 0; i < ps[now].rel.size(); i++) {
            int next = ps[now].rel.get(i);
             
            if(V[next] == order - 1) { // 방문순서 바로 이전은 continue
                continue;
            }
             
            if(V[next] < order) { // 방문순서 작은거면 사이클 찾았네
                dfsEnd = true;
                stt = next; // 사이클 시작
                end = now; // 사이클 끝
                break;
            }
             
            if(dfsEnd) {
                return;
            }
             
            V[next] = order + 1;
            befo[next] = now;
            dfs(next, order + 1);
             
            if(dfsEnd) {
                return;
            }
        }
    }
}
