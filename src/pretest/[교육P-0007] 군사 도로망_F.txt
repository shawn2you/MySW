import java.io.*;
import java.util.*;
 
public class Solution {
    static int T, N, M, K;
    static long ans, tmpAns;
    static ArrayList<Edge> arr = new ArrayList<Edge>();
    static int[] uni;
     
    static class Edge {
        int x, y, cost;
         
        public Edge(int x, int y, int cost) {
            this.x = x;
            this.y = y;
            this.cost = cost;
        }
    }
     
    static void merge(int x, int y, int cost) {
        x = find(x);
        y = find(y);
         
        if(x == y) {
            tmpAns += cost;
            return;
        }
         
        uni[x] = y;
        ans += cost;
    }
     
    static int find(int x) {
        if(x == uni[x]) {
            return x;
        }
         
        return uni[x] = find(uni[x]);
    }
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
         
        for(int test_case = 1; test_case <= T; test_case++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            K = Integer.parseInt(st.nextToken());
            arr.clear();
            uni = new int[N + 1];
            ans = 0;
            tmpAns = 0;
             
            for(int i = 1; i <= N; i++) {
                uni[i] = i;
            }
             
            int x, y, c;
             
            for(int i = 0; i < M; i++) {
                st = new StringTokenizer(br.readLine());
                x = Integer.parseInt(st.nextToken());
                y = Integer.parseInt(st.nextToken());
                c = Integer.parseInt(st.nextToken());
                 
                arr.add(new Edge(x, y, c));
            }
             
            Collections.sort(arr, new Comparator<Edge>() {
                @Override
                public int compare(Edge o1, Edge o2) {
                    return o2.cost - o1.cost;
                }
            });
             
            for(Edge e : arr) {
                merge(e.x, e.y, e.cost);
            }
             
            arr.clear();
            ans = tmpAns;
             
            for(int i = 0; i < K; i++) {
                st = new StringTokenizer(br.readLine());
                x = Integer.parseInt(st.nextToken());
                y = Integer.parseInt(st.nextToken());
                c = Integer.parseInt(st.nextToken());
                 
                arr.add(new Edge(x, y, c));
            }
             
            Collections.sort(arr, new Comparator<Edge>() {
                @Override
                public int compare(Edge o1, Edge o2) {
                    return o1.cost - o2.cost;
                }
            });
             
            for(Edge e : arr) {
                merge(e.x, e.y, e.cost);
            }
             
            System.out.println("#" + test_case + " " + ans);
        }
    }
}
