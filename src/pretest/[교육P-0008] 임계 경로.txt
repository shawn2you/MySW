[교육P-0008] 임계 경로

[문제]

삼성 SDS에서 운영하는 공장 중 한 곳에는 N개의 공정이 있고, 각 공정 사이에는 M개의 작업 관계가 있다. 공정을 정점으로, 작업 관계를 방향성 간선으로 표현했을 때, 아래와 같은 그림이 된다.







위 그림에서 1번 공정에서 작업이 시작되어 2번, 3번, 4번 공정에 작업한 결과물을 보낸다. 작업한 결과물을 보내는데 걸리는 시간은 간선 가중치와 동일하며, 각 공정에서 작업하는데 걸리는 시간은 무시할 수 있을 만큼 작다. 다만, 한 공정에서 작업을 시작하기 위해서는 이전에 필요한 작업 결과물을 다 받은 상황에서 시작할 수 있다. 예를 들어, 6번 공정에서 작업을 시작하기 위해서는 2번 공정, 4번 공정, 5번 공정에서 작업한 결과물을 모두 받아야한다.




1번 공정에서 작업을 시작했을 때, N번 공정에서 작업을 완료하는 최소 시간을 구하는 프로그램을 작성하시오.




[입력] 
입력 파일에는 여러 테스트 케이스가 포함될 수 있다. 파일의 첫째 줄에 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. (1 ≤ T ≤ 15) 각 케이스의 첫 줄에 공정의 수 N과 컨베이어 벨트의 수 M이 공백으로 구분되어 주어진다. (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 300,000)
그리고 다음 M개의 줄에 각 컨베이어 벨트에 대한 정보를 나타내는 세 정수가 공백으로 구분되어 주어진다. "a b c"라고 주어졌을 때 a번 공정에서 b번 공정으로 작업을 보내야하는데 보내는데 걸리는 시간이 c라는 것을 의미한다. (1 ≤ a, b ≤ N, 1 ≤ c ≤ 10,000, a ≠ b)
작업은 항상 1번 공정에서 시작하며, N번 공정에서 끝난다. 입력으로 주어지는 정보를 그래프로 표현했을 때, 그래프는 DAG(Directed Acyclic Graph)가 되며, 1번 정점으로 들어오는 간선의 개수는 0이고, N번 정점에서 나가는 간선의 개수 또한 0이다. 그리고 항상 작업이 완료되도록 입력이 주어진다.




[출력] 
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 이때 x는 케이스의 번호이다. 같은 줄에, 1번 공정에서 작업을 시작하여 N번 공정에서 작업이 완료되는데 걸리는 최소 시간을 출력한다.




[입출력 예]
(입력)
2     ← 2 test cases in total
7 9   ← 1st case
1 2 4
1 3 2
1 4 3
2 6 3
2 7 5
3 5 1
4 6 4
5 6 2
6 7 5
7 10  ← 2nd case
6 4 5
1 6 7
4 5 5
5 7 5
5 7 3
1 4 7
1 3 2
6 4 5
5 7 6
1 2 2




(출력)
#1 12
#2 23


import java.io.*;
import java.util.*;
 
public class Solution {
    static int T, N, M;
    static Node[] input;
    static Queue<Node> que = new LinkedList<Node>();
     
    static class Node {
        int time, inDeg;
        ArrayList<int[]> arr;
         
        public Node() {
            this.time = 0;
            this.inDeg = 0;
            this.arr = new ArrayList<>();
        }
    }
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
         
        for(int test_case = 1; test_case <= T; test_case++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            input = new Node[N + 1];
            que.clear();
             
            for(int i = 1; i <= N; i++) {
                input[i] = new Node();
            }
             
            int a, b, c;
             
            for(int i = 0; i < M; i++) {
                st = new StringTokenizer(br.readLine());
                a = Integer.parseInt(st.nextToken());
                b = Integer.parseInt(st.nextToken());
                c = Integer.parseInt(st.nextToken());
                 
                input[a].arr.add(new int[]{b, c});
                input[b].inDeg++;
            }
             
            que.add(input[1]); // inDeg 가 0 인 노드 큐에 넣기
             
            while(!que.isEmpty()) {
                Node tmp = que.poll();
                 
                for(int[] n : tmp.arr) {
                    input[n[0]].inDeg--;
                    input[n[0]].time = Math.max(input[n[0]].time, tmp.time + n[1]);
                     
                    if(input[n[0]].inDeg == 0) {
                        que.offer(input[n[0]]);
                    }
                }
            }
             
            System.out.println("#" + test_case + " " + input[N].time);
        }
    }
}
