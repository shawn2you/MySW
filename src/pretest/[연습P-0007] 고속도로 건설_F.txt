import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;
  
public class Solution {
    static int T, N, M, Ans;
    static ArrayList<Info> path = new ArrayList<Info>();
    static int[] u;
  
    static class Info implements Comparable<Info> {
        int a, b, s;
  
        public Info(int a, int b, int s) {
            this.a = a;
            this.b = b;
            this.s = s;
        }
  
        @Override
        public int compareTo(Info o) {
            // TODO Auto-generated method stub
            return this.s - o.s;
        }
  
    }
  
    public static void main(String[] args) throws Exception {
        //double startTime = System.currentTimeMillis();
  
        //System.setIn(new FileInputStream("A0031자율주행테스트_input.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
  
        for(int tc = 1; tc <= T; tc++) {
            N = Integer.parseInt(br.readLine());
            M = Integer.parseInt(br.readLine());
            Ans = 0;
            path.clear();
  
            int a, b, s;
  
            for(int i = 0; i < M; i++) {
                st = new StringTokenizer(br.readLine());
                a = Integer.parseInt(st.nextToken());
                b = Integer.parseInt(st.nextToken());
                s = Integer.parseInt(st.nextToken());
                path.add(new Info(a, b, s));
            }
  
            Collections.sort(path);
            kruskal();
   
            System.out.println("#" + tc + " " + Ans);
        }
  
        //System.out.println((System.currentTimeMillis() - startTime) / 1000);
    }
  
    static void kruskal() {
        int cnt = 0;
        u = new int[N + 1];
  
        for(int i = 1; i <= N; i++) {
            u[i] = i;
        }
  
        int a, b;
  
        for(int i = 0; i < M; i++) {
            a = path.get(i).a;
            b = path.get(i).b;
  
            if(find(a) == find(b)) { // 이미 같은 그룹이면 continue
                continue;
            }
  
            union(a, b); // 같은그룹 만들기
            Ans += path.get(i).s;
            cnt++;
  
            if(cnt == N - 1) {
                break;
            }
        }
    }
  
    static void union(int a, int b) {
        int pa = find(a);
        int pb = find(b);
  
        u[pb] = pa;
    }
  
    static int find(int a) {
        if(u[a] == a) { // 대장이면
            return a;
        }
  
        return u[a] = find(u[a]);
    }
}
