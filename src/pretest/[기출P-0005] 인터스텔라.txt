[기출P-0005] 인터스텔라

우주 여행이 보편화된 미래에 인류는 N개의 행성을 지구화하여 살고 있다. 행성들은 1번부터 N번까지 번호가 붙어 있다. 물론 이때도 두 행성 사이를 여행할 때는 최단 경로를 사용하고 싶어 할 것이다. 모든 두 행성의 쌍 간에 직접 여행이 가능하면 좋겠지만 우주에는 블랙홀, 성운, 감마선 지대 등이 있어서 직접 여행이 불가능한 경우가 많이 있다. 우리는 직접 여행이 가능한 모든 M개의 쌍들을 알고 있으며 이 쌍들 간에 여행하는 데 필요한 시간도 알고 있다. 시간은 어떤 단위시간으로 자연수로 표시될 것이다.

여러분이 사용할 우주선에는 특별히 K개의 워프 패킷이 있어서 워프 패킷을 사용하여 기존에 여행이 가능한 행성의 쌍에 한하여 1 단위 시간에 여행을 할 수 있다. 사용 가능한 워프 패킷의 개수는 최대 2개이다. 주어진 워프 패킷을 모두 사용할 필요는 없다.











위의 그림에서 원은 행성, 원 안의 수는 행성의 번호, 선은 직접 여행이 가능한 행성의 쌍, 선 옆의 수는 그 소요 시간을 나타낸다. 이 예에서 1번 행성에서 4번 행성으로 여행하려고 한다고 하자. 사용 가능한 워프 패킷의 개수가 0개인 경우 최소 시간은 9가 될 것이다. 사용 가능한 워프 패킷이 1개인 경우 최소 시간은 7이 된다. 마지막으로, 사용 가능한 워프 패킷의 개수가 2개인 경우 최소 시간은 4가 된다.

행성의 수와 여행이 가능한 행성들의 쌍 및 그 여행 시간, 그리고 사용 가능한 워프 패킷의 개수를 입력으로 받아, 두 행성 사이를 여행하는 최단 시간을 계산하는 프로그램을 작성하라.




[입력]
첫째 줄에 테스트 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. 각 케이스의 첫째 줄에는 행성의 개수를 나타내는 자연수 N과 여행 가능한 행성의 쌍의 개수인 M, 그리고 워프 패킷의 개수 K가 주어진다. (2 ≤ N ≤ 100,000, 1 ≤ M ≤ 200,000, 0 ≤ K ≤ 2) 행성들은 1번부터 N번까지 번호가 붙어 있다. 다음 M개의 줄에는 각각 하나씩의 여행 가능한 행성의 쌍이 주어진다. 즉, 각 줄에는 세개의 자연수가 주어지는데, 첫 두 수는 행성의 번호이고 세번째 수는 두 행성 간을 여행하는 데 걸리는 시간이다. 행성 간을 여행하는 데 걸리는 시간은 1 이상 100,000 이하의 자연수이다. 한 줄에 있는 두 행성의 번호는 항상 다르며, 동일한 행성의 쌍은 최대 한번만 주어진다. 임의의 두 행성 간에 (필요하면 다른 행성을 거쳐서) 여행할 수 있는 방법이 항상 존재함이 보장된다. 마지막 줄에는 여행하는 거리를 계산하고 싶은 두 행성의 번호가 주어진다.




[출력]
각각의 테스트 케이스에 대하여 #x (x는 1부터 시작하는 테스트 케이스의 번호)를 출력하고 공백을 하나 둔 다음, 두 행성 사이를 여행하는 최단 시간을 하나의 자연수로 출력한다. 출력할 값은 32비트 정수 변수로 표현할 수 있는 범위를 넘을 수 있음에 주의하라.




[입출력 예]
(입력)
3
6 6 0
1 2 3
5 1 2
5 6 5
3 4 3
6 4 6
2 3 3
1 4
6 6 1
1 2 3
5 1 2
5 6 5
3 4 3
6 4 6
2 3 3
4 1
6 6 2
1 2 3
5 1 2
5 6 5
3 4 3
6 4 6
2 3 3
1 4




(출력)
#1 9
#2 7
#3 4




(sample_input.txt에 대한 출력)

#1 9999900000
#2 387611
#3 1193489
#4 337443
#5 618285
#6 440476
#7 255266
#8 184867
#9 267544
#10 316086


import java.util.*;
import java.io.*;
 
class data implements Comparable<data>
{
    int idx;
    long dis;
    public int compareTo(data d1) {
        if(this.dis-d1.dis>0) return 1;
        else if( this.dis==d1.dis)return 0;
        else return -1;
    }
    data(int idx, long dis){
        this.idx = idx;
        this.dis = dis;
    }
     
}
public class Solution {
 
    static int N, M, K, S, E;
    static long Answer;
    static long[][] Dist = new long[100001][3];
    static int[] visited = new int[100001];
    //static int[][] map;
    static ArrayList<data>[] map = new ArrayList[100001];
    static PriorityQueue<data> Q= new PriorityQueue<data>();
     
    public static void main(String[] args) throws Exception 
    {
        //System.setIn(new FileInputStream("D:/workspace/input/pro_0005.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
         
        int T = Integer.parseInt(br.readLine().trim());
         
        for( int i=0 ; i<100001 ; i++ )
        {
            map[i] = new ArrayList<data>();
        }
        for( int test_case=1 ; test_case<=T ; test_case++ )
        {
            init();
            st = new StringTokenizer(br.readLine().trim());
             
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            K = Integer.parseInt(st.nextToken());
             
            for( int i=1 ; i<=M ; i++ )
            {
                st = new StringTokenizer(br.readLine().trim());
                int y = Integer.parseInt(st.nextToken());
                int x = Integer.parseInt(st.nextToken());
                int t = Integer.parseInt(st.nextToken());
                map[y].add(new data(x, t));
                map[x].add(new data(y, t));
            }
             
            st = new StringTokenizer(br.readLine().trim());
            S = Integer.parseInt(st.nextToken());
            E = Integer.parseInt(st.nextToken());
             
            Dijkstra(S, E);
            Answer = Math.min(Dist[E][0], Dist[E][1]);
            Answer = Math.min(Answer, Dist[E][2]);
            System.out.println("#"+test_case+" " + Answer);
        }
    }
    public static void Dijkstra( int s, int e)
    {
        // Dist 배열 초기화
        Dist[s][0] = 0;
        Dist[s][1] = 0;
        Dist[s][2] = 0;
         
        Q.add(new data(s, 0));
        visited[s] = 1;
         
        while(!Q.isEmpty() )
        {
            long min = Long.MAX_VALUE;
            int min_idx = -1;
             
            min_idx = Q.peek().idx;
            min = Q.peek().dis;
            Q.poll();
             
            if( min_idx == e ) return;
            if( min > Dist[min_idx][0] ) continue;
             
            visited[min_idx] = 1;
            for( int i=0 ; i<map[min_idx].size() ; i++ )
            {
                int tmp_idx = map[min_idx].get(i).idx;
                long tmp_dis = map[min_idx].get(i).dis;
                if( visited[tmp_idx] == 0 && tmp_dis > 0)
                {
                     
                    if( K== 0 )
                    {
                        if(Dist[tmp_idx][0] > Dist[min_idx][0] + tmp_dis)
                        {
                            Dist[tmp_idx][0] = Dist[min_idx][0] + tmp_dis;
                            Q.add(new data(tmp_idx, Dist[tmp_idx][0]));
                        }
                    }
                    else if( K==1 )
                    {
                        if(Dist[tmp_idx][0] > Dist[min_idx][0] + tmp_dis)
                        {
                            Dist[tmp_idx][0] = Dist[min_idx][0] + tmp_dis;
                            Q.add(new data(tmp_idx, Dist[tmp_idx][0]));
                        }
                        long tmp = Math.min(Dist[min_idx][1] + tmp_dis, Dist[min_idx][0]+1);
                        if( Dist[tmp_idx][1] > tmp )
                            Dist[tmp_idx][1] = tmp;
                    }
                    else if( K==2 ) 
                    {
                        if(Dist[tmp_idx][0] > Dist[min_idx][0] + tmp_dis)
                        {
                            Dist[tmp_idx][0] = Dist[min_idx][0] + tmp_dis;
                            Q.add(new data(tmp_idx, Dist[tmp_idx][0]));
                        }
                        long tmp = Math.min(Dist[min_idx][1] + tmp_dis, Dist[min_idx][0]+1);
                        if( Dist[tmp_idx][1] > tmp )
                            Dist[tmp_idx][1] = tmp;
                         
                        long tmp2 = Math.min(Dist[min_idx][2] + tmp_dis, Dist[min_idx][1]+1);
                        if( Dist[tmp_idx][2] > tmp2 )
                            Dist[tmp_idx][2] = tmp2;
                         
                    }
                     
                         
                     
                }
                     
            }
             
        }
         
         
         
         
    }
    public static void init()
    {
        N=0;
        M=0;
        K=0;
        S=0;
        E=0;
        Q.clear();
        Answer=0;
        for( int i=0 ; i<=100000 ; i++ )
        {
            visited[i] = 0;
            map[i].clear();
        }
        for( int i=1 ; i<=100000 ; i++ )
        {
            Dist[i][0] = Long.MAX_VALUE;
            Dist[i][1] = Long.MAX_VALUE;
            Dist[i][2] = Long.MAX_VALUE;
             
        }
    }
}
