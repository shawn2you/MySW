import java.io.*;
import java.util.*;
 
public class Solution {
    static int T, N, max1, max2;
    static final int INF = 10000001;
    static long Answer;
    static ArrayList<Point> list; // stack
     
    static Point p0;
    static Point[] P;
    static class Point {
        int x, y, idx;
         
        public Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
     
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        T = Integer.parseInt(br.readLine());
         
        for(int test_case = 1; test_case <= T; test_case++) {
            N = Integer.parseInt(br.readLine());
            P = new Point[N];
            list = new ArrayList<>();
            p0 = new Point(INF, INF);
             
            for(int i = 0; i < N; i++) {
                st = new StringTokenizer(br.readLine());
                int x = Integer.parseInt(st.nextToken());
                int y = Integer.parseInt(st.nextToken());
                P[i] = new Point(x, y);
                 
                if(p0.y > y || (p0.y == y && p0.x > x) ){
                    p0.x = x;
                    p0.y = y;
                }
            }
 
            Arrays.sort(P, new Comparator<Point>(){
                public int compare(Point o1, Point o2) {
                    long ccw = ccw(p0, o1, o2);
                     
                    if(ccw == 0) { // 일직선이면 거리 비교, 가까운 점 우선
                        long dist1 = dist(p0, o1);
                        long dist2 = dist(p0, o2);
                         
                        if(dist1 < dist2) { // o1이 더 가까우면 순서 유지
                            return -1;
                        }
                        else if(dist1 > dist2) {
                            return 1;
                        }
                    }
                     
                    if(ccw > 0) { // left turn이면  기준점에서 볼때 o1이 작은 각도, 순서유지
                        return -1;
                    }
                    else {        // right turn이면 바꿈
                        return 1;
                    }
                }
            });
          
            for(int i=0; i < N; i++){
                P[i].idx = i;
            }
             
            convexHull(-1);
 
            Answer = 0;
            rc(true);
              
            convexHull(max1);
              
            Answer = 0;
            rc(false);
              
            convexHull(max2);
            rc(false);
              
            System.out.println("#" + test_case + " " + Answer);
        }       
    }
      
    static int ccw(Point r, Point p, Point q) {
        int px = p.x - r.x;
        int py = p.y - r.y;
        int qx = q.x - r.x;
        int qy = q.y - r.y;
         
        return ccw(px, py, qx, qy);
    }
     
    static int ccw(int px, int py, int qx, int qy){
        long ret = (long) px * qy - (long) py * qx;
         
        if(ret > 0) {
            return 1;
        }
        else if(ret < 0) {
            return -1;
        }
        return 0;
    }
     
    static long dist(Point p1, Point p2){
        return dist(p1.x, p1.y, p2.x, p2.y);
    }
      
    static long dist(int ax, int ay, int bx, int by){
        long d1 = bx - ax;
        long d2 = by - ay;
        return (long) d1 * d1 + (long) d2 * d2;
    }
     
    static void convexHull(int idx) { // Graham Scan
        list.clear();
         
        for(int i = 0; i < N; i++){
            if(i == idx) { // 건너뛸 인덱스
                continue;
            }
             
            while(list.size() > 1 && ccw(list.get(list.size()-2), list.get(list.size()-1), P[i]) <= 0){ // 스택에 두개 이상, left turn 나올때까지 loop
                list.remove(list.size()-1);
            }
            list.add(P[i]);
        }
    }
     
    static void rc(boolean first){ // rotating calipers
        int p0idx = 0;
        int p1idx = 1;
        int size = list.size();
         
        for(p0idx = 0; p0idx < size; p0idx++){
            Point p0 = list.get(p0idx);
            Point p1 = list.get(p1idx);
            Point p0n = list.get((p0idx+1)%size);
            Point p1n = list.get((p1idx+1)%size);
             
            while(ccw(new Point(0,0), getVector(p0,p0n), getVector(p1,p1n)) > 0) { // right turn 나올때까지 loop
                p1idx = (p1idx+1)%size;
                p1 = list.get(p1idx);
                p1n = list.get((p1idx+1)%size);
            }
             
            long d = dist(p0,p1);
             
            if(Answer < d){
                Answer = d;
                if(first) max1 = p0.idx;
                if(first) max2 = p1.idx;
            }
        }
    }
     
    static Point getVector(Point p1, Point p2){
        return new Point(p2.x-p1.x, p2.y-p1.y);
    }
}
