[기출P-0023] 운동하자

철수는 운동을 좋아한다. 달리기를 특히 좋아해서 한 장소에서 다른 장소로 이동할 때도 항상 먼 길을 돌아서 가는 습관이 있다. 철수가 사는 도시는 N개의 교차로로 구성되어 있고 M개의 도로가 있어서 각각 서로 다른 두 교차로를 양방향으로 잇는다. 교차로는 1부터 N까지 번호가 붙어 있다. 어떤 인접한 두 교차로를 잇는 도로는 최대 하나이다. 도로들의 길이는 서로 다를 수 있다.




철수는 1번 교차로에서 출발하며, 2번 교차로에 도착하려고 한다. 철수는 가까운 길을 가는 것을 절대적으로 싫어하기 때문에 인접한 두 교차로를 이동할때는 두 교차로 사이의 최단경로를 이용하여 이동하지 않는다. 



철수는 위와 같은 운동을 매일 하려고 하는데, 한번 사용한 전체 경로는 다시 사용하지 않는다. 한번 사용한 경로에 포함된 어떤 도로를 나중에 다시 사용하는 것은 괜찮지만 경로 전체가 같으면 안된다. 또, 경로에 포함된 도로의 개수는 최대 N-1이다. 경로를 거치면서 같은 교차로나 도로를 여러 번 거치는 것은 허용된다. 심지어 2번 교차로를 중간에 거치는 것도 허용된다.




  




위의 예에서, 원 안의 숫자는 교차로의 번호이며, 선 옆의 숫자는 도로의 길이를 의미한다. 예에서 N이 4이므로 철수가 이용할 수 있는 도로의 최대 개수는 3개이다. 1번 교차로에서 2번 교차로로 가면서 포함된 도로의 개수가 최대 3개인 경로의 개수는 많지만 그 중 어떤 부분도 최단 경로가 아닌 것은 [1, 2]와 [1, 2, 4, 2], [1, 2, 1, 2]의 3가지 밖에 없다. [1, 3, 2]의 경로로 달리기를 할 경우는 1번 교차로에서 3번 교차로로 가는 도로와 3번 교차로에서 2번 교차로로 가는 도로 모두 최단 경로이므로 이용할 수 없다.



교차로의 개수와 도로의 정보를 입력으로 받아 철수가 서로 다른 경로로 1번 교차로에서 2번 교차로로 이동하는 것을 며칠이나 계속할 수 있는지 계산하는 프로그램을 작성하라. 




[입력] 	
입력 파일의 제일 첫째 줄에는 파일에 포함된 케이스의 수 T가 주어진다. 각 케이스의 첫째 줄에 교차로와 도로의 개수를 각각 나타내는 자연수 N, M이 주어진다. (2 ≤ N ≤ 500, 1 ≤ M ≤ 100,000) 다음 M개의 줄 각각에 도로의 정보가 세개의 자연수로 주어지는데, 첫 두 자연수는 도로가 연결하는 서로 다른 교차로들의 번호이며, 세번째 자연수는 도로의 길이이다. 도로의 길이는 1 이상 1,000,000,000이하의 자연수이다. 특정한 두 교차로를 연결하는 도로는 최대 하나이다.




[출력] 	
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 이때 x는 케이스의 번호이다. 같은 줄에, 철수가 문제에서 정한 방법으로 이동할 수 있는 최대 날 수를 1,000,000,007로 나눈 나머지를 출력한다. 




[입출력 예]     
(입력)     
2
4 5
1 2 4
4 2 5
2 3 1
4 3 3
1 3 2
3 3      
1 2 1      
2 3 2      
3 1 3      

(출력)	
#1 3
#2 0       





(sample_input.txt에 대한 출력)

#1 3
#2 0
#3 0
#4 864411082
#5 845525075
#6 558739612
#7 136773387
#8 454343547
#9 457070569
#10 616725630


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 
public class Solution {
 
    static final long LongMax = 1000000000;
    static ArrayList<Integer>[] edge, edgeV;
    static boolean[] check;
    static long[][] matrix, mindist;
    static int[][] edgeNo, edgeinfo;
    static long[][] D;
    static int N, M;
    static final int MOD = 1000000007;
    static long[][] DP;
 
    public static void main(String[] args) throws Exception {
 
         
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
 
        int T = Integer.parseInt(br.readLine());
        for (int tc = 1; tc <= T; tc++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
 
            matrix = new long[N + 1][N + 1];
            mindist = new long[N + 1][N + 1];
            edgeNo = new int[N + 1][N + 1];
            D = new long[N][N + 1];
            check = new boolean[M + 1];
            edgeinfo = new int[M + 1][3];
            edge = new ArrayList[N + 1];
            edgeV = new ArrayList[N + 1];
             DP = new long[N][N+1];
 
            for (int i = 1; i <= N; i++) {
                edge[i] = new ArrayList<>();
                edgeV[i] = new ArrayList<>();
 
                for (int j = 1; j <= N; j++)
                    mindist[i][j] = LongMax;
            }
            int tempa, tempb, tempc;
            for (int i = 1; i <= M; i++) {
                st = new StringTokenizer(br.readLine());
                tempa = Integer.parseInt(st.nextToken());
                tempb = Integer.parseInt(st.nextToken());
                tempc = Integer.parseInt(st.nextToken());
                matrix[tempa][tempb] = tempc;
                matrix[tempb][tempa] = tempc;
                mindist[tempa][tempb] = tempc;
                mindist[tempb][tempa] = tempc;
                edgeNo[tempa][tempb] = i;
                edgeNo[tempb][tempa] = i;
 
                edgeinfo[i][0] = tempa;
                edgeinfo[i][1] = tempb;
                edgeinfo[i][2] = tempc;
            //  System.out.println(edgeinfo[i][0] + " " + edgeinfo[i][1] + " " + edgeinfo[i][2] + " " + check[i]);
            }
 
            // printarr();
 
            floyd();
 
            delEdge();
 
            saveEdge();
 
            dp();
            long answer=0;
            for(int i=1;i<N;i++) {
                answer+=DP[i][2];
            }
            System.out.println("#" + tc + " " + (answer % 1000000007));
 
        } // tc
 
    }// main
 
    public static void dp() {
 
        long temp;
        for(int i=0;i<edge[1].size();i++) {
            DP[1][edge[1].get(i)]=1;
        }//for i
         
        for(int i=2;i<=N-1;i++) {
            for(int j=1;j<=N;j++) {
                temp=0;
                for(int k=0;k<edge[j].size();k++) {
                    temp = temp+DP[i-1][edge[j].get(k)];
                }//for k
                //System.out.println(temp);
                DP[i][j] = temp%MOD;
                //if(D[i][j]>=MOD) D[i][j]-=MOD; 
            }//for j
        }//for i
//System.out.println(DP[1][2]+" " + DP[2][2]+" "+DP[3][2]);
    }
     
     
     
    public static void floyd() {
 
        for (int k = 1; k <= N; k++) {
            for (int i = 1; i <= N; i++) {
                for (int j = 1; j <= N; j++) {
                    mindist[i][j] = Math.min(mindist[i][j], mindist[i][k] + mindist[k][j]);
                } // for j
            } // for i
        } // for k
    } // floyd
 
    public static void delEdge() {
 
        for (int i = 1; i <= N; i++) {
            for (int j = i + 1; j <= N; j++) {
                if (matrix[i][j] != 0 && (matrix[i][j] == mindist[i][j])) {
                    // System.out.println(matrix[i][j] + " " + mindist[i][j]);
                    check[edgeNo[i][j]] = true;
                }
            }
        }
        // for (int i = 1; i <= M; i++)
        // System.out.println(check[i]);
    }// delEdge
 
    public static long solve() {
        return 0;
    }// solve
 
    public static void saveEdge() {
        int a, b, c;
        for (int i = 1; i <= M; i++) {
        //  System.out.println(check[i]);
            if (!check[i]) {
                a = edgeinfo[i][0];
                b = edgeinfo[i][1];
                c = edgeinfo[i][2];
            //  System.out.println(a + " " + b + " " + c);
                edge[a].add(b);
                edge[b].add(a);
                edgeV[a].add(c);
                edgeV[b].add(c);
            }
        } // for i
 
        //System.out.println(edge[2]);
    }// saveEdge
 
    public static void printarr() {
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++)
                System.out.print(matrix[i][j] + " ");
            System.out.println();
        }
 
        System.out.println();
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++)
                System.out.print(edgeNo[i][j] + " ");
            System.out.println();
        }
 
        System.out.println();
 
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++)
                System.out.print(mindist[i][j] + " ");
            System.out.println();
        }
    }
 
}
