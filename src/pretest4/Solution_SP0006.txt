2
4
0 5 3 1
2 0 8 6
8 5 0 4
4 9 8 0
6
0 8 1 7 13 18
13 0 13 5 3 5
16 17 0 8 14 5
5 7 15 0 18 10
10 15 13 11 0 9
1 8 1 20 4 0



[문제]
N개의 도시가 있고, 임의의 두 도시 사이에는 항상 도로가 있다. 도시는 1번부터 N번까지 차례대로 번호가 매겨져있다. a번 도시에서 b번 도시로 직접 가는 도로의 길이와 b번 도시에서 a번 도시로 직접 가는 도로의 길이가 다를 수 있다. 그리고, 어떤 도시에서 다른 도시로 가는데, 직접 연결된 도로를 통해 가는 것보다, 다른 도시들을 거쳐가는 것이 좋을 때가 있다. 따라서 a번 도시에서 b번 도시로 가는 "거리"란, a번 도시에서 하나 이상의 도로를 거쳐 b번 도시로 가는 여러 방법 중 "길이가 가장 짧은 것"을 의미한다. 따라서 역시 a번 도시에서 b번 도시로 가는 거리와 b번 도시에서 a번 도시로 가는 거리 또한 다를 수 있음에 유의하도록 하자.




도시의 도로 정보가 주어졌을 때, 도시간 거리가 가장 긴 곳을 찾아 그 거리를 구하는 프로그램을 작성하시오.

예를 들어 도시가 2개 이며, 1번 도시에서 2번 도시까지의 도로의 길이가 5, 2번 도시에서 1번 도시까지의 도로의 길이가 3 이면, 답은 5 가 된다.





[입력] 
입력 파일에는 여러 테스트 케이스가 포함될 수 있다. 파일의 첫째 줄에 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. (1 ≤ T ≤ 15) 각 케이스의 첫 줄에 도시의 수 N이 주어진다. (1 ≤ N ≤ 300)
그리고 다음 N개의 줄에 걸처 각 줄에는 도로에 대한 정보를 나타내는 음이 아닌 정수 N개가 공백으로 구분되어 주어진다. 이 N개의 줄 중에서 i번째 줄에서 j번째로 주어지는 수는 i번 도시에서 j번 도시로 가는 도로의 길이를 의미하며, 이 수는 1,000,000 보다 크지 않다. i번째 줄에서 i번째 수는 항상 0이다.




[출력] 
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 이때 x는 케이스의 번호이며 1부터 시작한다. 그리고 공백을 하나 둔 후, 거리가 가장 긴 곳의 거리를 출력한다.




[입출력 예]
입력
2                                                  ← 2 test cases in total
4                                                  ← 1st case
0 5 3 1
2 0 8 6
8 5 0 4
4 9 8 0
6                                                   ← 2nd case
0 8 1 7 13 18
13 0 13 5 3 5
16 17 0 8 14 5
5 7 15 0 18 10
10 15 13 11 0 9
1 8 1 20 4 0




출력
#1 9
#2 15
