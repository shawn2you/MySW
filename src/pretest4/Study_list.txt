6일차 교육 (그래프)
- 트리그래프 : 순환하지않는다, 두정점간 1개의 단순경로만 존재, 하나의 간선 제거시 연결되지 않는다.

- 간선리스트(E*2), 인접행렬(V*V), 인접리스트(V + E, ArrayList V) 


Solution_EP0023.java - (중상) [연습P-0023] 동맹의 동맹은 동맹 (Union-Find)
(중상) [교육P-0008] 임계 경로 
(중상) [교육P-0007] 군사 도로망

과제 - (중) [연습A-0002] 키순서 



그래프의 특징
- 어느정도는 알고리즘이 정해져있다. 
  (예 : 다익스트라, 크루스칼, union-find 등등)
  (일정하게 유사한 풀이법이 존재한다.)
- 알고리즘 구동에 관한 이해가 있어야한다.
- pro 문제는 알고리즘 그대로 적용하는 문제는 거의 나오지 않음

그래프의 표현
2. 간선리스트 : 간선의 나열, 간선수 * 2 만큼의 공간이 필요
3. 인접행렬 : V * V 배열선언, 배열[i][j] = i 에서 j 갈수 있으면 1 (가중치) 아니면 0
1. 인접리스트 : 간선의 갯수만큼  인접리스트(Arraylist, Vector) 배열을 선언해서
                    배열[v] 에 v 와 연결된 간선들의 정보를 넣는다.
                   (가중치가 있는 그래프는 가중치도 같이 넣습니다. > 자바는 class , C 는 struct

union-find

- 초기화 : 각자가 스스로를 바라볼수 있게 (self loop)
- find 함수 : 내가 스스로 보는 값이 나올때 까지 계속 반복 .. (재귀)
          이때 나의 부모 배열에 return 값을 다시 넣음으로써 다시 찾아올때 시간 단축!!
- union 함수 : 합치고자 하는 두점의 집합 대표번호를 찾아서 ... find ... 
                  두 점을 연결한다 (두점의 연결 순서는 상관 없음)

                   
임계경로 (위상정렬) (~4시까지 풀이)
- ArrayList 나 vector 를 활용해서 그래프를 그린다.
- 진입차수 배열을 만들어서 진입차수들을 계산한다.
  1 -> 5 로 간다. 그러면 5의 진입차수 +1 
- 큐나 스택을 이용해서, 
   진입차수가 0인 정점을 저장하는 공간을 만든다.  
- 큐나 스택에서 하나씩 빼서,
   해당 정점에 간선으로 연결된 정점들의 시간을 갱신하고,
   진입차수를 하나씩 내린다. 
   ( 진입차수가 0이 되면 다시 큐에 넣는다.)
- 큐또는 스택이 빌때까지 반복한다.
                   
                   
                   
군사도로망
- 이미 건설된 도로들을 음수처리해서,
  Union 하면 정답갱신을하지않고, 
  이미 연결된 정점들이면 정답갱신을 하고 넘어갑니다.
최소신장트리(MST, 크루스칼 알고리즘을 사용한 풀이)
- union-find 자료 구조를 사용한다.
- 간선리스트 형태로 간선들을 나열한다. (배열) 
   (정점1, 정점2, 간선비용)
   (자바는 Class, C 나 Cpp 은 Struct 를 사용)
- 간선비용을 기준으로  위에서 만든 배열을 정렬한다.
   (또는 우선순위 Queue에 담아둔다.)
- 간선비용이 작은 간선부터 하나씩 빼면서 MST 를 구성한다.
   이때, 간선에 연결된 두 정점이 같은 집합에 속해있다면 
   (즉 연결되어 있다면 = 두 정점을 find 했는데 같은 결과가 나오면)
   해당 간선은 Pass 한다.
   같은 집합이 아니라면, 두 정점을 연결하고, union 한다. 
- 정점갯수 - 1 개 만큼 간선을 소비했다면 (union 했다면) 종료.
                   