4
5 2 1
5 2 2
5 2 3
5 2 4






'0'과 '1'로만 구성된 문자열을 비트문자열이라고 한다. 길이가 N인 비트 문자열 중에 '1'의 개수가 K개인 비트 문자열을 아름다운 비트문자열이라고 한다. N과 K가 주어졌을 때 아름다운 비트문자열 중에서 오름차순으로 X번째인 아름다운 비트문자열을 구하는 프로그램을 작성하시오.



[제한조건]

1. X는 아름다운 비트문자열의 개수보다 적게 주어진다.

2. 아름다운 비트문자열의 개수는 64비트형 정수를 넘을 수 있다.


[입력] 

입력 파일에는 여러 테스트 케이스가 포함될 수 있다. 파일의 첫째 줄에 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다. 각 케이스의 첫 줄에는 비트문자열의 길이 N과 '1'의 수 K, 오름차순으로 구할 번째수를 나타내는 X가 공백으로 구분되어 주어진다. (1 ≤ K ≤ N ≤ 1,000, 1 ≤ X ≤ 260)




[출력] 
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 이때 x는 케이스의 번호이다. 이후 같은 줄에 한 칸의 공백을 두고, 길이가 N이고 ‘1’의 개수가 K개인 아름다운 비트문자열 중에 오름차순으로 X번째인 비트문자열을 출력한다.




[입출력 예]
(입력)
4
5 2 1
5 2 2
5 2 3
5 2 4




(출력)
#1 00011
#2 00101
#3 00110
#4 01001




(sample_input.txt에 대한 출력)

#1 00000001000000000000
#2 11111111111111111111
#3 10011011111110000010
#4 01101100010010000000
#5 01110100011101100100
#6 00001000010000111000
#7 11100001111111110010
#8 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101111111011111111111111111101111110110111111111011111111011111111111111111111111111111011011111111111110111110111111111111111111101111111111111101111111111111111111111111

#10 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111011111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111110111111111111111




