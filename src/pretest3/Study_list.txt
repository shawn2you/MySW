1일차 교육 (알고리즘 기초)
- DFS(단절점/선, 위상정렬, 사이클찾기 등), BFS(최단경로, 위상정렬 등)

Solution_A0028.java 1일차 1번 문제 - (중) [연습A-0028] 나누기 : 재귀호출
Solution_P0013.java 1일차 2번 문제 - (중) [기출A-0013] 숫자 배치하기 : 순열(재귀 - DFS)
Solution_A0013.java 1일차 3번 문제 - (중) [연습A-0013] 피크닉 : 그래프(BFS - 경로찾기)
Solution_P0029.java 1일차 4번 문제 - (중) [기출A-0029] 퍼즐 게임 / 풀어봐야 함

Solution_P0001_T.java 1일차 과제     - (중상) [연습P-0001] 큰수만들기 (stack : LinkedList https://www.holaxprogramming.com/2014/02/12/java-list-interface/)


2일차 교육 (자료구조)

Solution_E0013.java - 2일차 1번 문제  - (중상) [교육P-0013] 나무 
Solution_P0023.java - 2일차 2번 문제  - (중상) [교육P-0023] 의미있는 문장 찾기 
Solution_P0020.java - 2일차 3번 문제  - (중상) [교육P-0020] 달리기 

Solution_P0016.java - 과제            - (중상) [교육P-0016] 동굴 (다른 개발소스 확인 필요)

Solution_TEST1.java - 모의고사        - (중) [연습A-0026] 지은이가 지은 집 



3일차 교육

Solution_A0020.java	- (중) [연습A-0020] 탑 - 자료구조설명
Solution_P0019.java - (중상) [연습P-0019] 구간합 - 구간합 문제풀기
Solution_P0003.java - (중상) [연습P-0003] 소수들의 곱셈 - 이진트리
(중상) [교육P-0010] 금속활자 인쇄기 - 트라이

Solution_P0041.java - 과제 : (중상) [기출P-0041] K-Heap 슈퍼이벤트


4일차 교육 (정수론)

Solution_A0004.java - (중) [교육A-0004] 금괴
Solution_P0005.java - (중상) [교육P-0005] 확장 유클리드 호제법 
Solution_A0022.java - (중) [연습A-0022] 소수경로 
(중상) [교육P-0015] 파이합

Solution_P0034.java - 과제 : (중상) [교육P-0034] 당황한 암호학자


5일차 교육 (조합론)

Solution_A0005.java - (중) [교육A-0005] 조합 
Solution_P0006.java - (중상) [기출P-0006] 아름다운 비트문자열 
Solution_P0028.java - (중상) [기출P-0053] 공주의 결혼식 

Solution_P0028.java - 과제 : (중) [기출A-0028] 제품의 일련번호 2 


Solution_TEST2.java - 모의고사        -  








5/20
※ 문제해결과정

1. 문제를 읽고 이해한다
2. 문제를 익숙한 용어로 재정의한다
3. 어떻게 해결할 지 계획을 세운다
4. 계획을 검증한다
5. 프로그램으로 구현한다
6. 어떻게 풀었는 지 돌아보고, 개선할 방법이 있는 지 찾아본다

※ 문제해결전략

- 직관과 체계적인 접근
- 체계적인 접근을 위한 질문들
1. 비슷한 문제를 풀어본 적이 있던가?
2. 단순한 방법에서 시작할 수 있을까?
3. 내가 문제를 푸는 과정을 수식화할 수 있을까?(손으로 풀 수 있을까?)
4. 문제를 단순화할 수 있을까?
5. 그림으로 그려볼 수 있을까?
6. 수식으로 표현할 수 있을까?
7. 문제를 분해할 수 있을까?
8. 뒤에서 부터 생각해서 문제를 풀 수 있을까?
9. 순서를 강제할 수 있을까?
10. 특정 형태의 답만을 고려할 수 있을까?

※ 동굴 
- 석순과 종유석을 각각 배열에 저장하지만, 높이 H 만큼 탐색하는 for문을 한번 만 이용하여 계산
- lowerBound 이용, 
static int lowerBound(int left, int right, int h, int type){
        int mid=0;
         
            while(left<right){
                mid=(left+right)/2;
                if(A[mid]>=h){ //key값이 중앙값보다 작거나 같으면
                    right=mid;
                }else{ //key값이 중앙 값보다 크면
                    left=mid+1;
                }
            }
        return right;
    }

※ 자료구조
        LinkedList<Character> stack = new LinkedList<>();
        Deque<Character> skack = new ArrayDeque<>();
        Queue <Integer> que = new LinkedList<Integer>();
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        
        
        
        

※ 지은이가 지은집
- 정렬 후 left(0), right(N-1) 먼저 더해보고, 찾고자 하는 X값과 비교하여, left++ 또는 right-- 한다.

※ 탑
- 우측에서 레이저가 발사되어 왼쪽에 있는 탑에 송신되는 지를 묻는 문제이지만,
  왼쪽 탑을 모두 탐색하면, 시간복잡도가 증가하니
  왼쪽 탑(0)부터 시작해서 우측에 있는 탑높이를 보면서, 시작한 탑에 송신될 지를 판단하고,
  탑의 높이를 스택에 저장해서, 다음 번 우측 탑 높이만 비교할 때 사용한다

※ 소수들의 곱셈
- 2,3,5,7 로 주어진 소수들끼리의 곱셈결과를 오름차순으로 나열하면서, N번째 결과를 찾는 문제
  주어진 소수(2,3,5,7) 를 저장한 배열은 고정으로 두고, 우선순위큐에 있는 값을 하나씩 꺼내서
  주어진 소수 배열에 있는 값들과 곱한 후, 그 결과를 다시 우선순위큐에 add 한다.
  우선순위큐를 쓰면, 값을 꺼낼 때, 작은 값부터 꺼내기 때문에 자연스럽게 정렬이 되어,
  N번째 값을 찾기가 쉽다.

※ 달리기
- 주어진 달리기 실력을 저장한 배열을 두고(3 1 2 4)
  실력 중복제거 및 오름차순으로 정렬된 자료구조에서, 저장된 배열의 값들이
  트리의 리프노드에 몇 번째인지를 찾아서, 본인과 부모까지 값을 ++ 해주고
  1번부터 본인의 -1 왼쪽까지 구간합을 구해본다

※ K-heap 슈퍼이벤트
- N이 10만까지 올 수 있으니, 큰 트리(S=2^17)를 만들어놓고
  카드를 뽑을 때 마다, 해당 카드 번호를 카운팅 한 다음,
  K번째 카드를 뽑으라고 하면, root부터 왼쪽,오른쪽을 탐색하면서
  leaf까지 와서, 해당하는 카드번호를 리턴하고 반납(--)한다. 
  root에서 leaf까지 오는 동안 지나온 노드의 카운팅도 반납(--) 한다


※ 소수경로
1)
                   int[] power = {curr/1000, curr%1000/100, curr%100/10, curr%10};
 
                    for(int j=0 ; j<4; j++){
                        for(int k=j==0?1:0; k<=9; k++){
                            int org = power[j];
                            power[j]=k;
                            int change = power[0]*1000+power[1]*100+power[2]*10+power[3];
                            power[j] = org;
 
                            if(visit[change] || isNonPrime[change]) continue;
                            visit[change] = true;
                            queue.add(change);
                        }
                    }

2)
 int curr, next;
      while(!pq.isEmpty()) {
          curr = pq.poll();
          for(int i=0; i<=9; i++) {   //매 자리마다 바꿀 수 있는 숫자
              for(int j=1; j<=minA; j*=10) {  //자리마다 체크 예) x의 1000 자리의 숫자 체크는 x/1000%10
                  //ABCD -> EBCD 로 바꾸면, 값에서 -A*1000-E*1000 처리하면 됨
                  if(i==0 && j==minA) continue;
                  next = curr - (curr/j%10)*j + i*j;  //각 자리(j)를 i로 바꿔주면서 체크
                  if(isPrime[next]&&!visited[next]) {
                      //System.out.println(next + " " + isPrime[next]);
                      visited[next] = true;
                      dist[next] = dist[curr] + 1;
                      pq.add(next);
                  }
              }
          }
      }
      
      
※ 아름다운 비트 문자열
- Combination 배열 만들 때, long타입으로
- 2의60승을 넘는 경우, 2의60승으로 치환

※ 제품의 일련번호 2

총 18자리 문자에서
iqnljekparocghbmdf
첫자리 i는 9번째 알파벳이면 처음 쓰였으니, 앞에 8개의 (사용되지 않은) 알파벳이 존재한다
(8*17!) 
2번 째 자리 q가 17번째 알파벳이면 앞에 i가 사용되었으니 15개의 (사용되지 않은) 알파벳이 존재한다
(15*16!)
3번째 지리 n은 14번째 알파벳이며 앞에 i와q는 사용되었으나, i는 n보다 앞이고 q는 n보다 뒤 이므로
앞에 12개의 (사용되지 않은)알파벳이 존재한다
(12*15!)
이런 식으로 맨 마지막 자리까지 계산을 하여 누적하면
(8*17!) + (15*16!) + (12*15!) + ..... 
해당 제품의 생산 순서를 알 수 있다. 

- 특정 알파벳이 몇 번째 알파벳인지를 알려 주어야 함
- 사용한 알파벳이 무엇인지를 알려 주어야 함

※ 공주의 결혼식

double D[][] = new double[A + 2][B + 2];
            if (A == 0 && B == 1) {
                D[1][0] = D[1][1] = 0;
                D[0][1] = 1;
            } else if (A == 1 && B == 0) {
                D[0][1] = D[1][1] = 0;
                D[1][0] = 1;
            } else if (A == 1 && B == 1) {
                D[0][1] = D[1][0] = 0;
                D[1][1] = 1;
            } else {
                D[A][B] = 1;
                for (int w = A; w >= 0; w--) {
                    for (int b = B; b >= 0; b--) {
                        if (w + 1 <= A && b + 1 <= B && w + 1 >= 1 && b + 1 >= 1) {
                            D[w][b] += D[w + 1][b + 1]
                                    * (double) (C[w + 1][1] * C[b + 1][1] / (double) C[(w + 1) + (b + 1)][2]);
                        }
                        if (w + 1 <= A && w + 1 >= 2) {
                            D[w][b] += D[w + 1][b] * (double) (C[w + 1][2] / (double) C[(w + 1) + b][2]);
                        }
                        if (b + 1 <= B && b + 1 >= 2) {
                            D[w][b] += D[w][b + 1] * (double) (C[b + 1][2] / (double) C[w + (b + 1)][2]);
                        }
 
                    }
                }
            }
            System.out.println("#" + tc + " " + D[1][0] + " " + D[0][1] + " " + D[1][1]);
      
